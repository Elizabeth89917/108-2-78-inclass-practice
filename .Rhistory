vectorExample[[1]]
vectorExample[[3]]
listExample <-
list(
student="小明",
`學期`=list(
`108-1`=list(
list(
name="個體經濟學",
teacher="Alice",
grade=85
)
),
`108-2`=list(
list(
name="總體經濟學",
teacher="Mark",
grade=78
)
)
)
)
# 有多少位置可選：
length(listExample)
listExample[[1]]
listExample[[2]]
library(jsonlite)
fromJSON("https://data.tainan.gov.tw/dataset/4cd9345a-04bf-4328-a97d-314ff78b4763/resource/afc025fc-1ef4-447c-b785-a680391d0ca1/download/tnsport2.json", simplifyDataFrame = F) -> tainanSportsMap
str(newTaipeiCityVaccine)
fromJSON("http://data.ntpc.gov.tw/api/v1/rest/datastore/382000000A-000157-002",
simplifyDataFrame = F) -> newTaipeiCityVaccine
vectorExample
vectorExample[c(T,T,F)] # 要，要，不要
str(listExample[c(F,T)]) # 不要，要
str(listExample[c(T,T)]) # 要，要
install.packages("curl")
fromJSON("http://data.ntpc.gov.tw/api/v1/rest/datastore/382000000A-000157-002",
simplifyDataFrame = F) -> newTaipeiCityVaccine
library(jsonlite)
fromJSON("https://data.tainan.gov.tw/dataset/4cd9345a-04bf-4328-a97d-314ff78b4763/resource/afc025fc-1ef4-447c-b785-a680391d0ca1/download/tnsport2.json", simplifyDataFrame = F) -> tainanSportsMap
length(tainanSportsMap)
tainanSportsMap[[1]]
tainanSportsMap[[1076]]
str(newTaipeiCityVaccine)
length(newTaipeiCityVaccine)
names(newTaipeiCityVaccine)
str(newTaipeiCityVaccine[[1]])
str(newTaipeiCityVaccine$success)
str(newTaipeiCityVaccine[["success"]])
str(newTaipeiCityVaccine[[2]],max.level=1)
str(newTaipeiCityVaccine$result,max.level=1)
str(newTaipeiCityVaccine[["result"]],max.level=1)
str(tainanSportsMap,max.level=1)
str(tainanSportsMap[c(1,382,1076)])
knitr::opts_chunk$set(echo = F, eval=F)
library(lubridate); library(jsonlite); library(readr)
taiwan_time <- "西元2019年4月12日 12點55分30秒"
oslo_time <- "18.11.2018 15:33:02"
install.packages(c("lubridate"))
install.packages(c("lubridate"))
taiwan_time <- "西元2019年4月12日 12點55分30秒"
oslo_time <- "18.11.2018 15:33:02"
taiwan_time <- "西元2019年4月12日 12點55分30秒"
oslo_time <- "18.11.2018 15:33:02"
# two_times_chicago
source("https://www.dropbox.com/s/bvs0m4oxw7yaqxw/108-2-hw1-3.R?dl=1")
fiveReceipts <- .randomReceipts(n=5)
knitr::opts_chunk$set(echo = TRUE)
str(listExample[c(F,T)]) # 不要，要
str(listExample[c(T,T)])
str(listExample[c(T,T)]) # 要，要
str(listExample)
names(taipeiNightMarkets)
fromJSON("https://www.dropbox.com/s/qnm9bnz7vccrvcz/taipeiNightMarkets.json?dl=1", simplifyDataFrame = F) -> taipeiNightMarkets
fromJSON("https://www.dropbox.com/s/qnm9bnz7vccrvcz/taipeiNightMarkets.json?dl=1", simplifyDataFrame = F) -> taipeiNightMarkets
fromJSON("https://www.dropbox.com/s/qnm9bnz7vccrvcz/taipeiNightMarkets.json?dl=1", simplifyDataFrame = F) -> taipeiNightMarkets
View(tainanSportsMap)
str(listExample,max.level = 3)
get1 <- listExample[["學期"]]
get2 <- listExample["學期"]
get1 <- listExample[["學期"]]
get2 <- listExample["學期"]
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
a <- 2
a = 2 # = 與 <-同義
3 -> b
a+b
num1 <- 5
num2 <- c(5)
vNum1 <- c(-1,5)
vNum2 <- c(2,3)
vNum3 <- c(vNum1,vNum2)
vNum4 <- c(-1,5,2,3)
vNum5 <- c(c(-1,5),c(2,3))
vNum1 <- c(-1,5)
vNum2 <- c(2,3)
vNum4 <- c() # 空向量
vNum3 <- c(vNum2, vNum1)
vNum4 <- c(vNum4, vNum1) # 向量疊代 （recursive vector concatenate）
# 10位學生的主系
majors10_char <- c('經濟學系','社會學系','社會學系','經濟學系','經濟學系','社會學系','經濟學系','經濟學系','經濟學系','社會學系')
typeof(majors10_char)
class(majors10_char)
majors10_factor <- factor(majors10_char)
# 或
majors10_factor <- factor(
c('經濟學系','社會學系','社會學系','經濟學系','經濟學系','社會學系','經濟學系','經濟學系','經濟學系','社會學系')
)
typeof(majors10_factor)
class(majors10_factor)
majors10_char
majors10_factor
as.integer(majors10_factor)
levels(majors10_factor)
studentId <- c(410773002, 410773015)
stringInteger <- c("1","2","-11")
class(stringInteger) # 無法進行數值運算
as.integer(stringInteger)+2
trueInteger <- as.integer(stringInteger)
class(trueInteger) # 可以進行數值運算
typeof(trueInteger)
trueInteger+2
vectorExample <- c("小明","小英","大雄")
# 有多少位置可選：
length(vectorExample)
vectorExample[[1]]
vectorExample[[3]]
listExample <-
list(
student="小明",
`學期`=list(
`108-1`=list(
list(
name="個體經濟學",
teacher="Alice",
grade=85
)
),
`108-2`=list(
list(
name="總體經濟學",
teacher="Mark",
grade=78
)
)
)
)
# 有多少位置可選：
length(listExample)
listExample[[1]]
listExample[[2]]
library(jsonlite)
fromJSON("https://data.tainan.gov.tw/dataset/4cd9345a-04bf-4328-a97d-314ff78b4763/resource/afc025fc-1ef4-447c-b785-a680391d0ca1/download/tnsport2.json", simplifyDataFrame = F) -> tainanSportsMap
# 有多少名字可選：
names(listExample)
listExample$student
listExample$`學期` # 特殊命名依然要用反頓點呼叫
vectorExample
vectorExample[c(1,3)]
vectorExample[c(3,2,1)] # 產生重新排列效果
# 顯示到第一層
str(listExample, max.level=1)
listExample[c(1,2)]
fromJSON("https://www.dropbox.com/s/qnm9bnz7vccrvcz/taipeiNightMarkets.json?dl=1", simplifyDataFrame = F) -> taipeiNightMarkets
vectorExample
vectorExample[c(T,T,F)] # 要，要，不要
str(listExample)
get1 # 學期拿出來，有3個元素的list
str(get1)
get2 # listExample 只留下 學期元素，是個只有一個元素的list
str(get2)
vectorExample <- c("小明","小英","大雄")
# 有多少位置可選：
length(vectorExample)
vectorExample[[1]]
vectorExample[[3]]
listExample <-
list(
student="小明",
`學期`=list(
`108-1`=list(
list(
name="個體經濟學",
teacher="Alice",
grade=85
)
),
`108-2`=list(
list(
name="總體經濟學",
teacher="Mark",
grade=78
)
)
)
)
# 有多少位置可選：
length(listExample)
listExample[[1]]
listExample[[2]]
library(jsonlite)
fromJSON("https://data.tainan.gov.tw/dataset/4cd9345a-04bf-4328-a97d-314ff78b4763/resource/afc025fc-1ef4-447c-b785-a680391d0ca1/download/tnsport2.json", simplifyDataFrame = F) -> tainanSportsMap
length(tainanSportsMap)
tainanSportsMap[[1]]
tainanSportsMap[[1076]]
# 有多少名字可選：
names(listExample)
listExample$student
listExample$`學期` # 特殊命名依然要用反頓點呼叫
str(listExample)
listExample[["student"]]
listExample$student
listExample[["學期"]] # 小心不是反頓點喔。
listExample$`學期`
student<-"student"
listExample[[student]]
fromJSON("http://data.ntpc.gov.tw/api/v1/rest/datastore/382000000A-000157-002",
simplifyDataFrame = F) -> newTaipeiCityVaccine
str(newTaipeiCityVaccine)
length(newTaipeiCityVaccine)
names(newTaipeiCityVaccine)
str(newTaipeiCityVaccine[[1]])
str(newTaipeiCityVaccine$success)
str(newTaipeiCityVaccine[["success"]])
str(newTaipeiCityVaccine[[2]],max.level=1)
str(newTaipeiCityVaccine$result,max.level=1)
str(newTaipeiCityVaccine[["result"]],max.level=1)
vectorExample
vectorExample[c(1,3)]
vectorExample[c(3,2,1)] # 產生重新排列效果
# 顯示到第一層
str(listExample, max.level=1)
str(listExample[c(1,2)], max.level=1)
str(listExample[c(2,1)], max.level=1)
str(tainanSportsMap,max.level=1)
str(tainanSportsMap[c(1,382,1076)])
# 顯示到第一層
str(listExample, max.level=1)
listExample[[c("學期")]]
listExample[c("student","學期")]
listExample[c("學期","student")]
fromJSON("https://www.dropbox.com/s/qnm9bnz7vccrvcz/taipeiNightMarkets.json?dl=1", simplifyDataFrame = F) -> taipeiNightMarkets
vectorExample
vectorExample[c(T,T,F)] # 要，要，不要
str(listExample[c(F,T)]) # 不要，要
str(listExample[c(T,T)])
str(listExample[c(T,T)]) # 要，要
names(taipeiNightMarkets)
str(listExample,max.level = 3)
str(listExample,max.level = 3)
get1 <- listExample[["學期"]]
get2 <- listExample["學期"]
get1 # 學期拿出來，有3個元素的list
str(listExample,max.level=3)
get1 <- listExample[["學期"]]
get2 <- listExample["學期"]
get1<listExample[["學期"]]
get1<-listExample[["學期"]]
(get,max.level=1)
get1<-listExample[["學期"]]
(get, max.level=1)
get1<-listExample[["學期"]]
str(get, max.level=1)
get2 # listExample 只留下 學期元素，是個只有一個元素的list
str(get2)
get2 # listExample["學期"] 只留下 學期元素，是個只有一個元素的list
str(get2, max.level = 1)
str(get2, max.level = 2)
str(listExample, max.level = 1)
str(listExample, max.level = 3)
str(listExample, max.level = 1)
str(listExample, max.level = 1)
str(listExample, max.level = 2)
str(listExample, max.level = 1)
str(listExample, max.level = 2)
numVector <- c(2,3,6,-1,4,2,6)
select1 <- numVector[c(1,4)]; select1
select2 <- select1[[1]]; select2
# 相當於
numVector[c(1,4)][[1]]
select1 <- numVector[c(1,4)];select1
select1 <- numVector[c(T,T,F,T,F,F,T)]; select1
select2 <- select1[c(1,4)]; select2
# 相當於
numVector[c(T,T,F,T,F,F,T)][c(1,4)]
majors <- c("經濟學系","經濟學系","社會學系","社工系","經濟學系")
names <- c("小英", "小美", "大雄","阿華", "阿尼")
gender <- c("F","F","M","F","M")
majors <- c("經濟學系","經濟學系","社會學系","社工系","經濟學系")
names <- c("小英", "小美", "大雄","阿華", "阿尼")
gender <- c("F","F","M","F","M")
# levels_fiveReceipts
levels(fiveReceipts)
# 啟動一個乾淨空的R環境
source("https://www.dropbox.com/s/xtge2ghfb7dhple/108-2-hw1-4.R?dl=1")
# 除了Global environment會清空，之前引入的套件也會被移除
yy <- 2020
mm <- `Mar.`
yy <- 2020
mm <- `Mar.`
# 啟動一個乾淨空的R環境
source("https://www.dropbox.com/s/xtge2ghfb7dhple/108-2-hw1-4.R?dl=1")
# 除了Global environment會清空，之前引入的套件也會被移除
# 啟動一個乾淨空的R環境
source("https://www.dropbox.com/s/xtge2ghfb7dhple/108-2-hw1-4.R?dl=1")
# 除了Global environment會清空，之前引入的套件也會被移除
# 啟動一個乾淨空的R環境
source("https://www.dropbox.com/s/xtge2ghfb7dhple/108-2-hw1-4.R?dl=1")
# 除了Global environment會清空，之前引入的套件也會被移除
# 啟動一個乾淨空的R環境
source("https://www.dropbox.com/s/xtge2ghfb7dhple/108-2-hw1-4.R?dl=1")
# 除了Global environment會清空，之前引入的套件也會被移除
yy <- 2020
mm <- "Mar."
dd <- 15
event_list <- list(
time=ymd(paste0(yy,",",mm,dd)),
list(
name="小明",
`是否完成`=True,
完成所花時間(秒)=350,
yy <- 2020
mm <- "Mar."
dd <- 15
event_list <- list(
time=ymd(paste0(yy,",",mm,dd)),
list(
name="小明",
是否完成=True,
完成所花時間(秒)=350,
yy <- 2020
mm <- "Mar."
dd <- 15
event_list <- list(
time=ymd(paste0(yy,",",mm,dd)),
list(
name="小明",
是否完成="true",
完成所花時間(秒)=350,
yy <- 2020
mm <- "Mar."
dd <- 15
event_list <- list(
time=ymd(paste0(yy,",",mm,dd)),
list(
name="小明",
是否完成= TRUE,
完成所花時間(秒)=350,
yy <- 2020
mm <- "Mar."
dd <- 15
event_list <- list(
time=ymd(paste0(yy,",",mm,dd)),
list(
name="小明",
是否完成= "true",
完成所花時間(秒)="350",
# chr_fiveReceipts
as.character(fiveReceipts)
# levels_fiveReceipts
levels(fiveReceipts)
source("https://www.dropbox.com/s/bvs0m4oxw7yaqxw/108-2-hw1-3.R?dl=1")
fiveReceipts <- .randomReceipts(n=5)
# levels_fiveReceipts
levels(fiveReceipts)
# chr_fiveReceipts
as.character(fiveReceipts)
# storage_fiveReceipts
as.integer(fiveReceipts)
# chr_fiveReceipts
chr_fiveReceipts <- as.character(fiveReceipts)
source("https://www.dropbox.com/s/bvs0m4oxw7yaqxw/108-2-hw1-3.R?dl=1")
fiveReceipts <- .randomReceipts(n=5)
# accidents
str(accidents)
# chr_fiveReceipts
chr_fiveReceipts <- as.character(fiveReceipts)
# chr_fiveReceipts
chr_fiveReceipts <- as.character(fiveReceipts)
# course
course<-list(approve=TRUE,coursename="會計學",type="必",credits=3,time_place=list(weekday="星期三",time_slots=7 8 9 ,classroom="商2F05"))
# course
course <- list(approve=TRUE,coursename="會計學",type="必",credits=3,time_place=list(weekday="星期三",time_slots=7 8 9 ,classroom="商2F05"))
fromJSON("https://www.dropbox.com/s/qnm9bnz7vccrvcz/taipeiNightMarkets.json?dl=1", simplifyDataFrame = F) -> taipeiNightMarkets
# course
course <- list(approve=TRUE,coursename="會計學",type="必",credits=3,time_place=list(weekday="星期三",time_slots=c(7,8,9) ,classroom="商2F05"))
# course
course <- list(approve=TRUE,coursename="會計學",type="必",credits=3,time_place=list(weekday="星期三",time_slots=c(7,8,9) ,classroom="商2F05"))
str(course)
# course
course <- list(course_info=list(approve=TRUE,coursename="會計學",type="必"),credits=3,time_place=list(weekday="星期三",time_slots=c(7,8,9) ,classroom="商2F05"))
str(course)
# course
course <- list(course_info=list(approve=TRUE,coursename="會計學",type="必",credits=3),time_place=list(weekday="星期三",time_slots=c(7,8,9) ,classroom="商2F05"))
str(course)
# course
course <- c(list(approve=TRUE,course_info=list(coursename="會計學",type="必",credits=3)),list(weekday="星期三",time_slots=c(7,8,9) ,classroom="商2F05"))
str(course)
# course
course <- list(list(approve=TRUE,course_info=list(coursename="會計學",type="必",credits=3)),list(weekday="星期三",time_slots=c(7,8,9) ,classroom="商2F05"))
str(course)
# course
course <- list(approve=TRUE,list(course_info=list(coursename="會計學",type="必",credits=3)),list(weekday="星期三",time_slots=c(7,8,9) ,classroom="商2F05"))
str(course)
# course
course <- list(list(approve=TRUE,course_info=list(coursename="會計學",type="必",credits=3)),list(weekday="星期三",time_slots=c(7,8,9) ,classroom="商2F05"))
str(course)
# course
course <- list(list(approve=TRUE,course_info=list(coursename="會計學",type="必",credits=3)),time_place=list(weekday="星期三",time_slots=c(7,8,9) ,classroom="商2F05"))
str(course)
# courseUpdate
course <- list(list(approve=TRUE,course_info=list(coursename="會計學",type="必",credits=3)),time_place=list(weekday=c("星期三","星期二"),time_slots=c(c(7,8),5) ,classroom="商2F05"))
# courseUpdate
course <- list(list(approve=TRUE,course_info=list(coursename="會計學",type="必",credits=3)),time_place=list(weekday=c("星期三","星期二"),time_slots=c(c(7,8),5) ,classroom="商2F05"))
course
yy <- 2020
mm <- "Mar."
dd <- 15
event_list <- list(
time=ymd(paste0(yy,",",mm,dd)),
list(
name="小明",
是否完成= "true",
完成所花時間(秒)="350",
install.packages("fromjson")
fromJSON("https://www.dropbox.com/s/qnm9bnz7vccrvcz/taipeiNightMarkets.json?dl=1", simplifyDataFrame = F) -> taipeiNightMarkets
install.packages("jsonlite")
knitr::opts_chunk$set(echo = TRUE)
fromJSON("https://www.dropbox.com/s/qnm9bnz7vccrvcz/taipeiNightMarkets.json?dl=1", simplifyDataFrame = F) -> taipeiNightMarkets
fromJSON("https://www.dropbox.com/s/qnm9bnz7vccrvcz/taipeiNightMarkets.json?dl=1", simplifyDataFrame = F) -> taipeiNightMarkets
install.packages("jsonlite")
fromJSON("https://www.dropbox.com/s/qnm9bnz7vccrvcz/taipeiNightMarkets.json?dl=1", simplifyDataFrame = F) -> taipeiNightMarkets
knitr::opts_chunk$set(echo = F, eval=F)
library(lubridate); library(jsonlite); library(readr)
taiwan_time<-ymd_hms("2019-04-12 12:55:30",
tz="Asia/Taipei")
oslo_time <-dmy_hms("18-11-2018 15:33:02",
tz="Europe/Oslo")
two_times<-c(taiwan_time,oslo_time)
# two_times
two_times_chicago<-with_tz(two_times, tzone= ("America/Chicago")
two_times_chicago
# courseUpdate
course <- list(list(approve=TRUE,course_info=list(coursename="會計學",type="必",credits=3)),time_place=list(weekday=c("星期三","星期二"),time_slots=c(c(7,8),5) ,classroom="商2F05"))
course
accidents<-list(
time=ymd("2014-01-01"),
bureaus=list(
`板橋分局`=list(
type="駕駛人過失-其他",
casualties=1),
`海山分局`=list(
type="駕駛人過失-搶越行人穿越道",
casualties=1)
)
)
accidents
accidents<-list(
time=ymd("2014-01-01"),
bureaus=list(
`板橋分局`=list(
type="駕駛人過失-其他",
casualties=1),
`海山分局`=list(
type="駕駛人過失-搶越行人穿越道",
casualties=1)
)
)
str(accidents)
source("https://www.dropbox.com/s/bvs0m4oxw7yaqxw/108-2-hw1-3.R?dl=1")
fiveReceipts <- .randomReceipts(n=5)
# storage_fiveReceipts
as.integer(fiveReceipts)
# levels_fiveReceipts
levels(fiveReceipts)->levels_fiveReceipts
levels_fiveReceipts
# storage_fiveReceipts
as.integer(fiveReceipts)->levels_fiveReceipts
storage_fiveReceipts
# storage_fiveReceipts
as.integer(fiveReceipts)->storage_fiveReceipts
storage_fiveReceipts
# chr_fiveReceipts
as.character(fiveReceipts)->chr_fiveReceipts
chr_fiveReceipts
sum_fiveReceipts<-sum(storage_fiveReceipts)
sum_fiveReceipts
yy <- 2020
mm <- "Mar."
dd <- 15
event_list <- list(
time=ymd(paste0(yy,",",mm,dd)),
list(
name="小明",
是否完成= "true",
完成所花時間(秒)="350",
yy <- 2020
mm <- "Mar."
dd <- 15
event_list <- list(
time=lubridate::ymd(paste0(yy,",",mm,dd)),
list(
name="小明",
`是否完成`=logi1<-TRUE,
`完成所花時間(秒)`="350",
tools=c(
"anchor","axe")
))
event_list
source("https://www.dropbox.com/s/mk7bxvu6a3lxf79/studentEnvironmentReport.R?dl=1",print.eval = T)
